bugs
- update requirements.txt with the latest packages
- update the readme with the latest instructions, maybe a build script would be helpful

usability improvements
- sensible handling of refreshing, currently it wipes out everything on the home and llm interaction pages
- handle responsiveness when adjusting width of the window

logging responses
- log all responses from the LLM to a file
- enable users to resume conversations
- store each interaction as a unique conversations
- tag each conversation with a score 1-5 to make it easier to add and bad examples to the prompts

llm interaction
- allow for speech to text in the user prompt to make it easier to answer questions given to the user in the response in step 1
- handling of creating new files with touch commands if necessary

prompt changes
- 3 shot examples in each prompt
- step 2, generate code for each file that needs to be changed and nothing else
- step 2, give all terminal commands in a separate code block, for any required library installations (ex: pip install or npm install), mkdir commands for new folders, and touch commands for new files. Assume I am in the root directory of my repo when giving me terminal commands.

step 3
- if there is placeholder code in the file that will make it likely to fail, respond with "PLACEHOLDER CODE DETECTED" and do not update the file
- if the new file is less lines of code than the existing file, respond with "WARNING - LINES OF CODE REDUCED" 

allow for back and forth with each step before proceeding to the next system prompt
- for example, confidence score must be > 60 before proceeding

stream response back using different api method

show visual mapping of existing steps
- if confidence score from step 1 is very low, exit and tell user to restructure prompt
- if low, ask user for more info or more source code, or repo tree
- if ok, proceed with warning, and at least 1 question
- if high, proceed to code gen
- if very high, proceed to code gen and applying changes

